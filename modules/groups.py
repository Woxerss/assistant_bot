from random import randint
from config import config
from aiogram import Bot, Dispatcher, types

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from .elements.keyboards import GroupsInlineKeyboard, AddGoogleSheetsInlineKeyboard, SelectedGroupInlineKeyboard

from .utils.cache import Cache
from .utils.user import User, Group

from filters.permissions import check_role

from .utils.sheets.sheets import GradesSheet, Table

from typing import List

import re

class NewGroupForm(StatesGroup):
    sheets_url = State()
    name = State()

class GroupModule():
    def __init__(self, dp: Dispatcher, bot: Bot):
        self.dp = dp
        self.bot = bot
        
        self.user_sheets = {}
        
        dp.register_message_handler(self.groups_command, commands=["groups", "–≥—Ä—É–ø–ø—ã"], role=['teacher', 'admin'])
        
        dp.register_callback_query_handler(self.on_select_group_button_clicked, lambda c: c.data.startswith("groups_select_"), role=['teacher', 'admin'])
        dp.register_callback_query_handler(self.on_add_group_button_clicked, lambda c: c.data == "groups_add", role=['teacher', 'admin'])
        dp.register_callback_query_handler(self.on_add_google_sheets_button_clicked, lambda c: c.data == "groups_add_sheets", role=['teacher', 'admin'])

        dp.register_callback_query_handler(self.on_return_to_groups_clicked, lambda c: c.data == "return_to_groups", role=['teacher', 'admin'])
        
        dp.register_message_handler(self.on_sheets_url_received, state=NewGroupForm.sheets_url)
        dp.register_message_handler(self.on_sheets_name_received, state=NewGroupForm.name)
    
    async def groups_command(self, message: types.Message):
        print('groups_command')
        
        user = Cache.get_user(message.from_id)
        answer = 'üìï*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø:* \n'
        if (len(user.groups) != 0):
            for group in user.groups:
                group: Group = group
                answer += f'‚ö° {group.name}\n'
        else:
            answer = '*–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É* \n'
        await message.answer(answer, parse_mode="MarkdownV2", reply_markup=GroupsInlineKeyboard(user))
        
    async def on_add_group_button_clicked(self, callback_query: types.CallbackQuery):
        print('on_add_group_button_clicked')
        # Answer callback
        await self.bot.answer_callback_query(callback_query.id)
        # Get user
        user = Cache.get_user(callback_query.from_user.id)
        
        # Answer
        answer = f'*‚ö† –í–∞–∂–Ω–æ\\!*\n'
        answer += f'–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É\\, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≥—É–≥–ª —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –≤ –≤–∞—à –∂—É—Ä–Ω–∞–ª\\. '
        answer += f'–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ —Ç–∞–±–ª–∏—Ü—ã –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞* –∏ –≤ –ø–æ–ª–µ *–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –≥—Ä—É–ø–ø—ã* '
        answer += f'–≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å `autosheets@cshelper-366120.iam.gserviceaccount.com` \\(–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\\)\\. –£–±–µ–¥–∏—Ç–µ—Å—å\\, '
        answer += f'—á—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ *–†–µ–¥–∞–∫—Ç–æ—Ä* –∏ –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–û—Ç–ø—Ä–∞–≤–∏—Ç—å*\\.\n\n'
        answer += f'üëÜ –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π —Å–≤–µ—Ä—Ö—É –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *–î–∞–ª–µ–µ* –∏ —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∂—É—Ä–Ω–∞–ª –≤ Google Sheets\\.\n'

        await callback_query.message.edit_text(answer, parse_mode="MarkdownV2", reply_markup=AddGoogleSheetsInlineKeyboard())
    
    async def on_add_google_sheets_button_clicked(self, callback_query: types.CallbackQuery):
        print('on_add_group_button_clicked')
        # Answer callback
        await self.bot.answer_callback_query(callback_query.id)
        # Get user
        user = Cache.get_user(callback_query.from_user.id)
        # Answer
        await NewGroupForm.sheets_url.set()
        answer = '**–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∂—É—Ä–Ω–∞–ª**'
        await callback_query.message.edit_text(answer, parse_mode="MarkdownV2")
        
    async def on_return_to_groups_clicked(self, callback_query: types.CallbackQuery):
        print('on_return_to_groups_clicked')
        # Answer callback
        await self.bot.answer_callback_query(callback_query.id)
        # Get user
        user = Cache.get_user(callback_query.from_user.id)
        answer = 'üìï*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥—Ä—É–ø–ø:* \n'
        if (len(user.groups) != 0):
            for group in user.groups:
                group: Group = group
                answer += f'‚ö° {group.name}\n'
        else:
            answer = '*–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É* \n'
        await callback_query.message.edit_text(answer, parse_mode="MarkdownV2", reply_markup=GroupsInlineKeyboard(user))
        
    async def on_sheets_url_received(self, message: types.Message, state: FSMContext):
        url = message.text
        if (url.find('docs.google.com/spreadsheets/d/')):
            url = url.split('/')
            sheets_id = ''
            for i in range(len(url)):
                if (url[i] == 'd'):
                    sheets_id = url[i + 1]
            print(sheets_id)
            try:
                sheets = GradesSheet(sheets_id)
                answer = f'–û—Ç–ª–∏—á–Ω–æ\\! –£ –º–µ–Ω—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∂—É—Ä–Ω–∞–ª—É\\!\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã \\(–Ω–µ –±–æ–ª—å—à–µ 32 —Å–∏–º–≤–æ–ª–æ–≤\\)\\:'
                await NewGroupForm.name.set()
                self.user_sheets[message.from_id] = sheets_id
                await message.answer(answer, parse_mode="MarkdownV2")
            except Exception as e:
                await message.answer(f'Error: {e}')
    
    async def on_sheets_name_received(self, message: types.Message, state: FSMContext):
        name = message.text
        if (re.match(r"[a-zA-Z ]{3,32}", message.text)):
            user = Cache.get_user(str(message.from_id))
            user.add_group(name, self.user_sheets[message.from_id])
            # user = Cache.update_user(user.id)
            await message.answer(f'–ì—Ä—É–ø–ø–∞ {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø: /groups')
            await state.finish()
            return
        message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ (–¥–ª–∏–Ω–∞ –æ—Ç 3 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤, –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª)')
    
    async def on_select_group_button_clicked(self, callback_query: types.CallbackQuery):
        print('on_select_group_button_clicked')
        # Answer callback
        await self.bot.answer_callback_query(callback_query.id)
        
        # Getting group
        user = Cache.get_user(callback_query.from_user.id)
        group_index = int(callback_query.data.split('_')[-1])
        group: Group = user.groups[group_index]
        
        # Answer
        answer = f'**‚ö° {group.name}**\n'
        answer += f'‚úÖ –ñ—É—Ä–Ω–∞–ª: *–ü–æ–¥–∫–ª—é—á–µ–Ω*\n' if group.sheets != None else f'‚ùé –ñ—É—Ä–Ω–∞–ª: *–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω*\n'
        answer += f'‚úÖ OnlineGDB: *–ü–æ–¥–∫–ª—é—á–µ–Ω*\n' if group.gdb != None else f'‚ùé OnlineGDB: *–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω*\n'
        answer += f'‚úÖ ACMP: *–ü–æ–¥–∫–ª—é—á–µ–Ω*\n' if group.acmp == True else f'‚ùé ACMP: *–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω*\n'
        
        await callback_query.message.edit_text(answer, parse_mode="MarkdownV2", reply_markup=SelectedGroupInlineKeyboard(group_index))
                
    async def cancel_handler(self, message: types.Message, state: FSMContext):
        """
        Allow user to cancel any action
        """
        current_state = await state.get_state()
        if current_state is None:
            return

        print('Cancelling state %r', current_state)
        # Cancel state and inform user about it
        await state.finish()
        # And remove keyboard (just in case)
        await message.reply('Cancelled.', reply_markup=types.ReplyKeyboardRemove())
    
        
def setup(dp: Dispatcher, bot):
    GroupModule(dp, bot)